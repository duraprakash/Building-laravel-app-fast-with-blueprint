Instructions:

1. create project using laravel10
    composer create-project laravel/laravel emp_sys "10.*" --prefer-dist

2. change directory
    cd emp_sys

3. run server
    php artisan serve

db connection with xammp
-- .env file --
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=emp_sys
    DB_USERNAME=root
    DB_PASSWORD=

4. migrate
    php artisan migrate

5. install blueprint
    composer require --dev laravel-shift/blueprint

6. draft.yaml file
    php artisan blueprint:new

-- draft.yaml file --
    models:
    Employee:
        name: string:100
        identifiacation: string:100
        birth: datetime:100
        salary: integer

    controllers:
    # ...

7. build model from yaml -generate model, migration and factory
    php artian blueprint:build

8. register model for seeding in DatabaseSeeder
    public function run(): void
    {
        \App\Models\Employee::factory(10)->create();
    }

9. run migration
    php artisan migrate:fresh

10. changes or update in draft.yaml structure -delete model, migration and factory
    php artisan blueprint:erase

    then, build blueprint
        php artian blueprint:build 
    also, run fresh migration
        php artisan migrate:fresh
    lastly, seeding
        php artisan db:seed

11. create blueprint.bat file manually which include -1 command 4 tasks
    php artisan blueprint:erase
    php artisan blueprint:build
    php artisan migrate:fresh
    php artisan db:seed

12. execute blueprint.bat in vscode terminal(error) -use system terminal(cmd)
    [in command prompt]  =>  blueprint
    [in powershell vscode terminal]  =>  ./blueprint

13. delete or rename draft.yaml to build new blueprint file
    draft1.yaml

14. (again) create new draft.yaml file
    php artisan blueprint:new

15. trace blueprint
    php artisan blueprint:trace

    NOTE: if dublicate model,migration and factory is build then run blueprint:erase

16. draft.yaml multiple line and model modifier
    models:
    Employee:
        name: 'string:100'
        identifiacation: 'string:100 unique'
        birth: datetime
        salary: integer
        marital_status: enum:single,married,divorced
        bonus: decimal:8,2 nullable
        order: unsignedinteger default:1 index

    controllers:
    # ...

    then, run batch file
    ./blueprint

17. one to many relationship [employee-department]
    models:
    Employee:
        name: "string:100"
        identifiacation: "string:100 unique"
        birth: datetime
        salary: integer
        marital_status: enum:single,married,divorced
        bonus: decimal:8,2 nullable
        order: unsignedinteger default:1 index
        department_id: id foreign:department.id
    Department:
        name: string:100

    controllers:
    # ...

    then, run batch file
    ./blueprint

18. many to many relationship [employee-project]
    models:
    Employee:
        name: "string:100"
        identifiacation: "string:100 unique"
        birth: datetime
        salary: integer
        marital_status: enum:single,married,divorced
        bonus: decimal:8,2 nullable
        order: unsignedinteger default:1 index
        department_id: id foreign:department.id
        relationships:
        belongsToMany: Project
    Department:
        name: string:100
        relationships:
        hasMany: Employee
    Project:
        name: string:100
        relationships:
        belongsToMany: Employee

    controllers:
    # ...

    then, run batch file
    ./blueprint

19. one to one relationship [emp-contactinfo]
    models:
    Employee:
        name: "string:100"
        identifiacation: "string:100 unique"
        birth: datetime
        salary: integer
        marital_status: enum:single,married,divorced
        bonus: decimal:8,2 nullable
        order: unsignedinteger default:1 index
        department_id: id foreign:department.id
        relationships:
        belongsToMany: Project
        hasOne: ContactInfo
    ContactInfo:
        phone: string:100
        email: string:100
        relationships:
        belongsTo: Employee
    Department:
        name: string:100
        relationships:
        hasMany: Employee
    Project:
        name: string:100
        relationships:
        belongsToMany: Employee

    controllers:
    # ...

    then, run batch file
    ./blueprint

20. shorthand timestampsTz, softDeletesTz on project
    models:
    Employee:
        name: "string:100"
        identifiacation: "string:100 unique"
        birth: datetime
        salary: integer
        marital_status: enum:single,married,divorced
        bonus: decimal:8,2 nullable
        order: unsignedinteger default:1 index
        department_id: id foreign:department.id
        relationships:
        belongsToMany: Project
        hasOne: ContactInfo
    ContactInfo:
        phone: string:100
        email: string:100
        relationships:
        belongsTo: Employee
    Department:
        name: string:100
        relationships:
        hasMany: Employee
    Project:
        name: string:100
        timestampsTz
        softDeletesTz
        relationships:
        belongsToMany: Employee

    controllers:
    # ...

    then, run batch file
    ./blueprint

21. seeders [department and contactinfo]
    models:
    Employee:
        name: "string:100"
        identifiacation: "string:100 unique"
        birth: datetime
        salary: integer
        marital_status: enum:single,married,divorced
        bonus: decimal:8,2 nullable
        order: unsignedinteger default:1 index
        department_id: id foreign:department.id
        relationships:
        belongsToMany: Project
        hasOne: ContactInfo
    ContactInfo:
        phone: string:100
        email: string:100
        relationships:
        belongsTo: Employee
    Department:
        name: string:100
        relationships:
        hasMany: Employee
    Project:
        name: string:100
        timestampsTz
        softDeletesTz
        relationships:
        belongsToMany: Employee

    seeders: Project , ContactInfo

    controllers:
    # ...

    then, run batch file
    ./blueprint

    IF DOESN'T WORK THE ADD THIS TO THE DatabaseSeeder
    public function run(): void
    {
        \App\Models\Project::factory(10)->create();
        \App\Models\ContactInfo::factory(10)->create();
    }

22. blueprint configuration
    blueprint.php file in config folder -in model folder there will be no more generated models
    php artisan blueprint:erase
    php artisan vendor:publish --tag=blueprint-config

    -- in config/blueprint.php -- !was not in this project though
    //'generate_fqcn_route' => false, to 
    'generate_fqcn_route' => true,

    -- in routes/web.php --
    Route::resource('employee', 'EmployeeController');
    Route::get('employee/test', [App\Http\Controllers\employmentController::class, 'test']);

23. auto generate controllers
    either follow 22 manually or

    -- in draft.yaml just add controllers to the existing code of 21 --
    controllers:
        Employee:
            test:
            query: all

    then, run batch file
    ./blueprint
    
    after that, add this dd($employees); in the controller
        class EmployeeController extends Controller
        {
            public function test(Request $request): Response
            {
                $employees = Employee::all();
                dd($employees); // this line of code
            }
        }
    
    -- in route/web.php -- route will be generated
        Route::get('employees/test', [App\Http\Controllers\EmployeeController::class, 'test']);
    
    then, test the actual output at urls: http://127.0.0.1:8000/employees/test

# challange ##5 Advance Models
    * make the whole ERD in a blueprint file
    * one-to-many relation (product-category)
    * many-to-many relation (customer-address)
    * decide what suitable modifiers you wanna add
    * generate 3 categories, 10 products, 4 customers
        * 2 of them are husband and wife and they share the same address
    * generate 100 bills on 2 weeks
        ACTIONS
    * get all sales in one dynamic
    * get the sum of all bills of one customer
    * get the sum of all bills in one given day for one customer
    
    * put them in actions that returns json

# challange ##6 Morph relation
    * add tags table
    * link with product and category
    * implement the morphMany realtion using blueprint

24. more advance query -- in draft.yaml
    models:
        Employee:
            name: "string:100"
            identifiacation: "string:100 unique"
            birth: datetime
            salary: integer
            marital_status: enum:single,married,divorced
            bonus: decimal:8,2 nullable
            order: unsignedinteger default:1 index
            department_id: id foreign:department.id
            relationships:
            belongsToMany: Project
            hasOne: ContactInfo
        ContactInfo:
            phone: string:100
            email: string:100
            relationships:
            belongsTo: Employee
        Department:
            name: string:100
            relationships:
            hasMany: Employee
        Project:
            name: string:100
            timestampsTz
            softDeletesTz
            relationships:
            belongsToMany: Employee

        seeders: Project , ContactInfo

        controllers:
        Employee:
            test:
            query: where:salary order:bonus

    then, run batch file
    ./blueprint
    
    after that, add this $salary = $request->salary; and dd($employees); in the generated controller
        class EmployeeController extends Controller
        {
            public function test(Request $request): Response
            {
                $salary = $request->salary; // this line of code
                //$employees = Employee::where('salary', $salary)->orderBy('bonus')->get();
                    OR
                $employees = Employee::where('salary','>', $salary)->orderBy('bonus')->get();
                dd($employees); // this line of code
            }
        }
    
    -- in route/web.php -- route will be generated
        Route::get('employees/test', [App\Http\Controllers\EmployeeController::class, 'test']);
    
    then, test the actual output at urls: http://127.0.0.1:8000/employees/test?salary=100
    then, look at items array like this in browser
     #items: array:10 [▼
        0 => App\Models\Employee {#1274 ▶}
        1 => App\Models\Employee {#1275 ▼
            #connection: "mysql"
            #table: "employees"
            #primaryKey: "id"
            #keyType: "int"
            +incrementing: true
            #with: []
            #withCount: []
            +preventsLazyLoading: false
            #perPage: 15
            +exists: true
            +wasRecentlyCreated: false
            #escapeWhenCastingToString: false
            #attributes: array:11 [▼
                "id" => 2
                "name" => "Trinity Cruickshank"
                "identifiacation" => "Nvkq0TafgbhI59RKtQmSqtWaHB4MMd75qja6FERdViWmLZtSKgYXtnBY7LQ6uIG87I9um3xUzZgmunaozvvDg5lg0ZvaUOUky0G6"
                "birth" => "2016-11-07 17:37:57"
                "salary" => 898
                "marital_status" => "divorced"
                "bonus" => "314919.46"
                "order" => 270424
                "department_id" => 2
                "created_at" => "2024-03-22 06:25:12"
                "updated_at" => "2024-03-22 06:25:12"
            ]
            #original: array:11 [▶]
        }

25. more advance enrich query -- in draft.yaml
    models:
        Employee:
            name: "string:100"
            identifiacation: "string:100 unique"
            birth: datetime
            salary: integer
            marital_status: enum:single,married,divorced
            bonus: decimal:8,2 nullable
            order: unsignedinteger default:1 index
            department_id: id foreign:department.id
            relationships:
            belongsToMany: Project
            hasOne: ContactInfo
        ContactInfo:
            phone: string:100
            email: string:100
            relationships:
            belongsTo: Employee
        Department:
            name: string:100
            relationships:
            hasMany: Employee
        Project:
            name: string:100
            timestampsTz
            softDeletesTz
            relationships:
            belongsToMany: Employee

        seeders: Project , ContactInfo

        controllers:
        Employee:
            test:
            query: where:salary where:name order:bonus limit:3

    then, run batch file
    ./blueprint
    
    after that, add this $salary = $request->salary; and dd($employees->toArray()); in the generated controller
        class EmployeeController extends Controller
        {
            public function test(Request $request): Response
            {
                $salary = $request->salary; // this line of code
                $name = $request->name; // this line of code
                $employees = Employee::where('salary', '>', $salary)->where('name','like', '%'. $name. '%')->orderBy('bonus')->limit(3)->get();
                dd($employees->toArray()); // this line of code with array
            }
        }
    
    -- in route/web.php -- route will be generated
        Route::get('employees/test', [App\Http\Controllers\EmployeeController::class, 'test']);
    
    then, test the actual output at urls: http://127.0.0.1:8000/employees/test?salary=1000&name=a
    then, look at items array like this in browser
    array:3 [▼ // app\Http\Controllers\EmployeeController.php:16
        0 => array:11 [▼
            "id" => 11
            "name" => "Susan Jerde"
            "identifiacation" => "GMr2Eym5B8jEBmWVFB6Ix757dHtTMcLl76cwqaIqPrhfr8yiRp1UQ4QqlZZzS1SUnQvY9aq0Zj1Gjc6B7N31oGcH01eTmQBvby9u"
            "birth" => "1982-04-21T02:05:38.000000Z"
            "salary" => 8821
            "marital_status" => "single"
            "bonus" => "37814.67"
            "order" => 21694336
            "department_id" => 11
            "created_at" => "2024-03-22T07:06:32.000000Z"
            "updated_at" => "2024-03-22T07:06:32.000000Z"
        ]
        1 => array:11 [▶]
        2 => array:11 [▶]
    ]

26. find in draft.yaml
    models:
        Employee:
            name: "string:100"
            identifiacation: "string:100 unique"
            birth: datetime
            salary: integer
            marital_status: enum:single,married,divorced
            bonus: decimal:8,2 nullable
            order: unsignedinteger default:1 index
            department_id: id foreign:department.id
            relationships:
            belongsToMany: Project
            hasOne: ContactInfo
        ContactInfo:
            phone: string:100
            email: string:100
            relationships:
            belongsTo: Employee
        Department:
            name: string:100
            relationships:
            hasMany: Employee
        Project:
            name: string:100
            timestampsTz
            softDeletesTz
            relationships:
            belongsToMany: Employee

        seeders: Project , ContactInfo

        controllers:
        Employee:
            test:
            find: id

    then, run batch file
    ./blueprint

    after that, add this $salary = $request->salary; and dd($employees->toArray()); in the generated controller
        class EmployeeController extends Controller
        {
            public function test(Request $request): Response
            {
                $employee = Employee::find($request->id);
                dd($employee->toArray());
            }
        }
    
    -- in route/web.php -- route will be generated
        Route::get('employees/test', [App\Http\Controllers\EmployeeController::class, 'test']);
    
    then, test the actual output at urls: http://127.0.0.1:8000/employees/test?id=3
    then, look at items array like this in browser
    array:11 [▼ // app\Http\Controllers\EmployeeController.php:14
        "id" => 3
        "name" => "Leon Gottlieb"
        "identifiacation" => "ZPdPfah9kInkjlvYI4ZI7rLj7YCBDIHJLiVMgLNnxQDQLsH2CERWDChYuo6w1FZ0BBiR1RdDCzkzg4oN0XSzk643BRYGN70kkmGK"
        "birth" => "1988-09-10T19:45:01.000000Z"
        "salary" => 6870
        "marital_status" => "married"
        "bonus" => "278477.46"
        "order" => 94469704
        "department_id" => 3
        "created_at" => "2024-03-22T07:18:32.000000Z"
        "updated_at" => "2024-03-22T07:18:32.000000Z"
    ]

27. find in draft.yaml
    models existing code ....
        controllers:
        Employee:
            test:
            find: id
            delete: employee

    then, run batch file
    ./blueprint

    after that, add this $salary = $request->salary; and dd($employees->toArray()); in the generated controller
        class EmployeeController extends Controller
        {
            public function test(Request $request): Response
            {
                $employee = Employee::find($request->id);
                $employee->delete();
            }
        }
    
    -- in route/web.php -- route will be generated
        Route::get('employees/test', [App\Http\Controllers\EmployeeController::class, 'test']);
    
    then, test the actual output at urls: http://127.0.0.1:8000/employees/test?id=3
    then, in the browser you might get error if response is not handled but in the database the record is deleted
        TypeError
        App\Http\Controllers\EmployeeController::test(): Return value must be of type Illuminate\Http\Response, none returned

28. make job - generate job folder 
    php artisan make:job ComputeSalary

    -- draft.yaml--
    models existing code...
        controllers:
        Employee:
            test:
            find: id
            dispatch: ComputeSalary with:employee

    then, run batch file
    ./blueprint

    after that, add this in the generated controller
        class EmployeeController extends Controller
        {
            public function test(Request $request): Response
            {
                $employee = Employee::find($request->id);
                $computeSalary = ComputeSalary::dispatch($request->employee);
                dd($computeSalary);
            }
        }
    
    -- in route/web.php -- route will be generated
        Route::get('employees/test', [App\Http\Controllers\EmployeeController::class, 'test']);
    
    then, test the actual output at urls: http://127.0.0.1:8000/employees/test?id=3
    then, in the browser
    Illuminate\Foundation\Bus\PendingDispatch {#291 ▼ // app\Http\Controllers\EmployeeController.php:18
        #job: App\Jobs\ComputeSalary {#299 ▶}
        #afterResponse: false
    }